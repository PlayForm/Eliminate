var x=u=>{const c=t.createSourceFile("temp.ts",u,t.ScriptTarget.Latest,!0),s={},n={},o=new Set,l=e=>{if(t.isVariableDeclaration(e)&&e.initializer){const i=e.name.getText();s[i]=0,n[i]=e.initializer}else if(t.isIdentifier(e)){const i=e.getText();i in s&&s[i]++}else(t.isExportAssignment(e)||t.isExportSpecifier(e))&&e.name&&o.add(e.name.getText());t.forEachChild(e,l)};l(c);const p=e=>i=>{function f(r){if(t.isVariableStatement(r)){const a=r.declarationList.declarations.filter(g=>{const m=g.name.getText();return s[m]!==1||o.has(m)});return a.length===0?t.factory.createEmptyStatement():t.factory.updateVariableStatement(r,r.modifiers,t.factory.updateVariableDeclarationList(r.declarationList,a))}else if(t.isIdentifier(r)){const a=r.getText();if(s[a]===1&&n[a]&&!o.has(a))return n[a]}return t.visitEachChild(r,f,e)}return t.visitNode(i,f)};return t.createPrinter().printFile(t.transform(c,[p]).transformed[0])};const t=await import("typescript");export{x as default,t as ts};
