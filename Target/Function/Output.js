var x=u=>{const f=t.createSourceFile("temp.ts",u,t.ScriptTarget.Latest,!0),a={},n={},o=new Set,l=e=>{if(t.forEachChild(e,l),!!t.isBindingName(e))if(t.isVariableDeclaration(e)&&e.initializer){const s=e.name.getText();a[s]=0,n[s]=e.initializer}else if(t.isIdentifier(e)&&t.isBindingName(e)){const s=e.getText();typeof a[s]<"u"&&a[s]++}else(t.isExportAssignment(e)||t.isExportSpecifier(e))&&t.isBindingName(e)&&o.add(e.name?.getText()??"")};l(f);const p=e=>s=>{const m=i=>{if(i=t.visitEachChild(i,m,e),t.isVariableStatement(i)){const r=i.declarationList.declarations.filter(g=>{const c=g.name.getText();return typeof a[c]<"u"?a[c]>1||o.has(c):!0});return r.length===0?t.factory.createEmptyStatement():t.factory.updateVariableStatement(i,i.modifiers,t.factory.updateVariableDeclarationList(i.declarationList,r))}else if(t.isIdentifier(i)&&t.isBindingName(i)){const r=i.getText();if(typeof a[r]<"u"&&a[r]===1&&n[r]&&!o.has(r))return n[r]}return i};return t.visitNode(s,m)};return t.createPrinter().printFile(t.transform(f,[p]).transformed[0])};const t=await import("typescript");export{x as default,t as ts};
